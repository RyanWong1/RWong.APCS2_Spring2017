package textExcel;

// Update this file with your own code.

public class Spreadsheet implements Grid
{
	private int rows = 20;
	private int columns = 12;
	private char[] alphabet = new char[] { 'A', 'B', 'C', 'D', 'E', 'F', 'G' };
	private Cell[][] sheet = new Cell[rows][columns];
	private String name = "";

	public Spreadsheet() {
		for(int i=0;i<rows;i++){
			for(int j=0;j<columns;j++){
				sheet[i][j]=new EmptyCell();
			}
		}
	}
	

	@Override
	public String processCommand(String command)
	{
		String[] splitCommand = command.split(" ");
		//in case of lower case
		splitCommand[0] = splitCommand[0].toUpperCase();
		//If length is 3 or less, that means it must want to inspectCell
		if(command.length()==0){
			return "";
		} else if(splitCommand.length >= 3){
			String userInput = splitCommand[2];
			int counter = 3;
			while(counter < splitCommand.length){
				//adds the space that was taken out and the next part of the value
				userInput += " " + splitCommand[counter];
				counter++;
			}
			String cell = splitCommand[0];
			cellAssignment(userInput, cell);
			return getGridText();
			//if its less than 3, it has to be cell inspection
		}else if(command.length() < 3){
			//make if statement to test the type of splitCommand[2]
			if()
			return cellInspection(splitCommand[0]);
			//check if the user input has clear, has been changed to uppercase
		} else if (splitCommand[0].contains("CLEAR")){
			//if theres no spaces, then must be just clear so clear entire cell
			if(splitCommand.length == 1){
				 clearEntireCell();
				 return getGridText();
				 //if there is space, then must be clearing just one spot
			} else{
				//in case the cell isnt uppercased
				clearOneCell(splitCommand[1].toUpperCase());
				return getGridText();
			}
		} 
		return "";
	}

	@Override
	public int getRows()
	{
		
		return rows;
	}

	@Override
	public int getCols()
	{
		// TODO Auto-generated method stub
		return columns;
	}

	@Override
	public Cell getCell(Location loc)
	{
		
		return null;
	}

	@Override
	public String getGridText()
	{
		String grid = "   |";
		
		//fills in the top row with the letters
		for(int i = 0; i < columns; i++){
			//cast to character type for letters, add the 10 spaces between this and the next one
			grid += (char) ('A' + i) + "         |";
		}
		
		//fills in the grid
		for(int i = 1; i <= rows; i++){
			//makes new line at end of row and adds the number
			grid += "\n" + i;
			//fixes the spacing when the numbers hit double digits
			if(i >= 10){
				grid += " |";
			}else{
				grid += "  |";
			}
			
			//sets all the values of each part of the array
			for(int k = 0; k < columns; k++){
				//includes the dashed lines at the end, only lets first 10 characters show
				//Puts the cell with its values in the grid
				//i-1 because i started at 1 for numbering but arrays are zero based
				grid += sheet[i-1][k].abbreviatedCellText() + "|";
			}
		}
		grid += "\n";// adds a new line after finishing creating the grid
		return grid;

		
	}

}
